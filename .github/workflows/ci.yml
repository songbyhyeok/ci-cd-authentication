name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Create a yml and env file for the app
        env:
          app_yml: ${{ secrets.APPLICATION_YML }}
          app_env: ${{ secrets.APPLICATION_ENV_FILE }}
        run: |
          echo "${app_env}" > ./.env

          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "${app_yml}" > application.yml

      - name: Set up JDK
        uses: actions/setup-java@v4.7.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Gradle Wrapper에 실행 권한 부여
      - name: Give Gradle Wrapper execute permissions
        run: chmod +x gradlew

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

  # 프로젝트의 의존성 그래프를 생성하고 GitHub에 제출
  # GitHub의 Dependabot이 프로젝트의 모든 의존성을 분석
  # 이 프로젝트의 모든 의존성을 분석하여 보안 취약점이 있는 라이브러리를 사용하고 있을 때 알림을 보낸다.
  dependency-submission:

    runs-on: ubuntu-latest
    needs: build # build 작업이 성공한 후에만 실행
    permissions:
      contents: write

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4.7.0
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@v4