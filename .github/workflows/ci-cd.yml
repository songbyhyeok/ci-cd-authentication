name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # GitHub Actions 워크플로우의 첫 번째 단계로, 리포지토리에서 최신 소스 코드를 가져와서 후속 작업(빌드, 테스트, 배포 등)을 위해 사용할 수 있도록 준비하는 역할
      - name: Checkout sources
        uses: actions/checkout@v4

      # Spring 애플리케이션 실행을 위한 필수 파일(.yml, .env)을 이식
      - name: Create a yml and env file for the app
        env:
          app_yml: ${{ vars.APPLICATION_YML }}
          app_env: ${{ secrets.APPLICATION_ENV_FILE }}
        run: |
          echo "$app_env" > ./.env
      
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "$app_yml" > application.yml

      # Java 17 (temurin 배포판)을 GitHub Actions 환경에 설치하고 설정하는 역할
      - name: Set up JDK
        uses: actions/setup-java@v4.7.0
        with:
          java-version: '17'
          distribution: 'temurin'

      # 작업 중에 생성된 파일이나 디렉토리를 캐시하여, 이후에 해당 파일들을 재사용함으로써 빌드 시간을 단축
      - uses: actions/cache@v4
        with:
          path: ~/.gradle  # Gradle 캐시 디렉토리
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }} # 캐시 키
          restore-keys: | # 캐시 복원 시 사용할 백업 키
            ${{ runner.os }}-gradle- 

      # Gradle을 자동으로 설치하고 설정하는 데 사용
      - name: Setup Gradle
        # 이전의 cache가 없다면 의존성을 설치합니다.
        if: steps.cache.outputs.cache-hit != 'true'
        uses: gradle/actions/setup-gradle@v4

      # Gradle Wrapper에 실행 권한 부여
      - name: Give Gradle Wrapper execute permissions
        run: chmod +x gradlew

      # Gradle을 사용하여 빌드 실행
      - name: Build with Gradle
        run: ./gradlew build

      # 빌드가 완료된 후, 생성된 .jar 파일을 아티팩트로 업로드하여 이후에 다른 작업에서 다운로드하고 사용할 수 있도록 저장하는 역할
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: jar-file
          path: build/libs/*.jar

  # 프로젝트의 의존성 그래프를 생성하고 GitHub에 제출
  # GitHub의 Dependabot이 프로젝트의 모든 의존성을 분석
  # 이 프로젝트의 모든 의존성을 분석하여 보안 취약점이 있는 라이브러리를 사용하고 있을 때 알림을 보낸다.
  dependency-submission:

    runs-on: ubuntu-latest
    needs: build # build 작업이 성공한 후에만 실행
    permissions:
      contents: write # 의존성 그래프를 GitHub에 제출하기 위한 쓰기 권한

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4.7.0
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@v4

  deploy:
    runs-on: ubuntu-latest
    needs: build # CI가 완료된 후에만 CD가 진행됨
    permissions:
      contents: read

    steps:
      # 이전 단계에서 업로드한 빌드 아티팩트를 다운로드하여, 이후 배포나 다른 작업에 사용할 수 있게 준비하는 역할
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.9
        with:
          name: jar-file
          path: build/libs/

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Create Dockerfile
        env:
          docker_file: ${{ vars.DOCKER_FILE }}
        run: |
            echo "${docker_file}" > ./Dockerfile

      - name: Build and push Docker images
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKER_HUB_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/ci-cd-authentication
            cd /home/ubuntu/ci-cd-authentication
            echo '${{ secrets.APPLICATION_ENV_FILE }}' > .env
            echo '${{ vars.DOCKER_COMPOSE_YML }}' > docker-compose.yml

            docker compose down
            docker compose up -d
           
